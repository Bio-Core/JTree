// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// OntologyTerm ontology term
// swagger:model OntologyTerm
type OntologyTerm struct {

	// ontology
	Ontology string `json:"ontology,omitempty"`

	// term
	// Required: true
	Term *string `json:"term"`

	// term Id
	// Required: true
	TermID *string `json:"termId"`
}

// Validate validates this ontology term
func (m *OntologyTerm) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateTerm(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateTermID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OntologyTerm) validateTerm(formats strfmt.Registry) error {

	if err := validate.Required("term", "body", m.Term); err != nil {
		return err
	}

	return nil
}

func (m *OntologyTerm) validateTermID(formats strfmt.Registry) error {

	if err := validate.Required("termId", "body", m.TermID); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *OntologyTerm) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OntologyTerm) UnmarshalBinary(b []byte) error {
	var res OntologyTerm
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
