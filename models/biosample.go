// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Biosample biosample
// swagger:model Biosample
type Biosample struct {

	// attributes
	Attributes Attributes `json:"attributes"`

	// collection age
	// Required: true
	CollectionAge *string `json:"collectionAge"`

	// created date
	CreatedDate strfmt.Date `json:"createdDate,omitempty"`

	// description
	// Required: true
	Description *string `json:"description"`

	// disease
	Disease *OntologyTerm `json:"disease,omitempty"`

	// id
	ID string `json:"id,omitempty"`

	// individual Id
	// Required: true
	IndividualID *string `json:"individualId"`

	// name
	// Required: true
	Name *string `json:"name"`

	// updated date
	UpdatedDate strfmt.Date `json:"updatedDate,omitempty"`
}

// Validate validates this biosample
func (m *Biosample) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCollectionAge(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateCreatedDate(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateDescription(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateDisease(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateIndividualID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateUpdatedDate(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Biosample) validateCollectionAge(formats strfmt.Registry) error {

	if err := validate.Required("collectionAge", "body", m.CollectionAge); err != nil {
		return err
	}

	return nil
}

func (m *Biosample) validateCreatedDate(formats strfmt.Registry) error {

	if swag.IsZero(m.CreatedDate) { // not required
		return nil
	}

	if err := validate.FormatOf("createdDate", "body", "date", m.CreatedDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Biosample) validateDescription(formats strfmt.Registry) error {

	if err := validate.Required("description", "body", m.Description); err != nil {
		return err
	}

	return nil
}

func (m *Biosample) validateDisease(formats strfmt.Registry) error {

	if swag.IsZero(m.Disease) { // not required
		return nil
	}

	if m.Disease != nil {

		if err := m.Disease.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("disease")
			}
			return err
		}
	}

	return nil
}

func (m *Biosample) validateIndividualID(formats strfmt.Registry) error {

	if err := validate.Required("individualId", "body", m.IndividualID); err != nil {
		return err
	}

	return nil
}

func (m *Biosample) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *Biosample) validateUpdatedDate(formats strfmt.Registry) error {

	if swag.IsZero(m.UpdatedDate) { // not required
		return nil
	}

	if err := validate.FormatOf("updatedDate", "body", "date", m.UpdatedDate.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Biosample) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Biosample) UnmarshalBinary(b []byte) error {
	var res Biosample
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
