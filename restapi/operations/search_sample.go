package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// SearchSampleHandlerFunc turns a function with the right signature into a search sample handler
type SearchSampleHandlerFunc func(SearchSampleParams) middleware.Responder

// Handle executing the request and returning a response
func (fn SearchSampleHandlerFunc) Handle(params SearchSampleParams) middleware.Responder {
	return fn(params)
}

// SearchSampleHandler interface for that can handle valid search sample params
type SearchSampleHandler interface {
	Handle(SearchSampleParams) middleware.Responder
}

// NewSearchSample creates a new http.Handler for the search sample operation
func NewSearchSample(ctx *middleware.Context, handler SearchSampleHandler) *SearchSample {
	return &SearchSample{Context: ctx, Handler: handler}
}

/*SearchSample swagger:route GET /samples/search searchSample

searches samples

By passing in the appropriate options, you can search for
available sample


*/
type SearchSample struct {
	Context *middleware.Context
	Handler SearchSampleHandler
}

func (o *SearchSample) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewSearchSampleParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

var searchHandler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {

})
