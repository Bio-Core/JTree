package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// SearchSampleHandlerFunc turns a function with the right signature into a search sample handler
type LogoutHandlerFunc func(LogoutParams) middleware.Responder

// Handle executing the request and returning a response
func (fn LogoutHandlerFunc) Handle(params LogoutParams) middleware.Responder {
	return fn(params)
}

// SearchSampleHandler interface for that can handle valid search sample params
type LogoutHandler interface {
	Handle(LogoutParams) middleware.Responder
}

// NewSearchSample creates a new http.Handler for the search sample operation
func NewLogout(ctx *middleware.Context, handler LogoutHandler) *Logout {
	return &Logout{Context: ctx, Handler: handler}
}

/*SearchSample swagger:route GET /samples/search searchSample

searches samples

By passing in the appropriate options, you can search for
available sample


*/
type Logout struct {
	Context *middleware.Context
	Handler LogoutHandler
}

func (o *Logout) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewLogoutParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

var logoutHandler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {

})
