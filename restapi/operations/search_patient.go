// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// SearchPatientHandlerFunc turns a function with the right signature into a search patient handler
type SearchPatientHandlerFunc func(SearchPatientParams) middleware.Responder

// Handle executing the request and returning a response
func (fn SearchPatientHandlerFunc) Handle(params SearchPatientParams) middleware.Responder {
	return fn(params)
}

// SearchPatientHandler interface for that can handle valid search patient params
type SearchPatientHandler interface {
	Handle(SearchPatientParams) middleware.Responder
}

// NewSearchPatient creates a new http.Handler for the search patient operation
func NewSearchPatient(ctx *middleware.Context, handler SearchPatientHandler) *SearchPatient {
	return &SearchPatient{Context: ctx, Handler: handler}
}

/*SearchPatient swagger:route GET /patient/search searchPatient

searches patients

By passing in the appropriate options, you can search for
available patients


*/
type SearchPatient struct {
	Context *middleware.Context
	Handler SearchPatientHandler
}

func (o *SearchPatient) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewSearchPatientParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
